# /usr/local/etc/motion/camera-usb.conf
#
# Sample configuration for USB attached camera
# on Seagate Central.
#
# Based on the sample config file for motion 4.3.2
#
# For more details on each parameter see
#
# https://motion-project.github.io/motion_config.html

###########################################################
# Configuration options specific to camera-usb
############################################################
# User defined name for the camera.
camera_name NAS-USB

# Numeric identifier for the camera. Used in the output
# stream URL.
camera_id 101

# Video device to be used for capturing. Normally
# something like /dev/video0. Note that the
# "by-id" device names do not seem to work well.
#
videodevice /dev/video0

# Set the input palette. Try to select a "raw" style
# palette as a "jpeg" or "compressed" palette will
# cause extra CPU load. If not set then the value
# will be chosen automatically.
#
# v4l2_palette 15


############################################################
# Output file configuration parameters
############################################################

# Use "conversion specifiers" to create meaningful
# file names.
#

# Base Target directory for pictures, snapshots and movies 
# (no conversion specifiers)
target_dir /Data/motion/NAS-USB

# File name (no extension) for pictures relative to target dir
#
# The following example creates a new directory under the
# target_dir for each day and stores files with the following
# style of name.
#
# ../NAS-USB-20210925/NAS-USB-20210925-173532-00-05.jpg
picture_filename %$-%Y%m%d/%$-%Y%m%d-%H%M%S-%q-%v

# File name (no extension) for movies relative to target dir
movie_filename %$-%Y%m%d/%$-%Y%m%d-%H%M%S-%v

# Have motion save an image periodically regardless
# of whether there's motion detected. In this 
# example we store a snapshot image every 3 hours
# in a dedicated directory.
snapshot_interval 10800
snapshot_filename %$-Snap/%$-%Y%m%d-%H%M%S-Snap

############################################################
# Image Processing configuration parameters
############################################################
# Parameters to control video device.  See motion_guide.html
; vid_control_params value

# Width and Height
#
# Make sure to determine the pixel width and height of
# the attached camera and use the same width and
# height information as the native output of the camera
# in use otherwise extra processing cycles will have to
# be used to convert the image.
#
# The camera output capabilities can normally be
# determined by the output of the following style
# of command
#
# ffprobe /dev/video0 -list_formats all
#
# Sometimes "lsusb -v" shows this information for a
# USB camera.

# Image width in pixels.
width 640

# Image height in pixels.
height 480

# Specify either "framerate" in frames per second
# or "minimum_frame_time" in seconds between frames.
#
# I would suggest using nothing more frequent than
# "minimum_frame_time 1"

# Maximum number of frames to be captured per second.
# framerate 2

# Gap in seconds between captured frames
minimum_frame_time 1

# Text to be overlayed in the lower left corner of images
text_left %v\nNAS-USB

# Text to be overlayed in the lower right corner of images.
text_right Garage\n%Y-%m-%d\n%T-%q

# Show the number of pixels that have changed in the top right
text_changes on

# Make the text bigger by this factor
text_scale 2


############################################################
# Motion detection configuration parameters
############################################################

# If set to on always save pictures and movies even if there 
# was no motion.
emulate_motion off

# Threshold for number of changed pixels that triggers motion.
#
# Bear in mind the size of the generated image when setting
# this parameter. i.e. How many total pixels are in the image?
threshold 250

# Despeckle the image using (E/e)rode or (D/d)ilate or (l)abel.
#
# In essence, despecking reduces sensitivity to isolated
# pixels, or small groups of pixels, changing between
# frames.
#
# This is useful where you are monitoring a scene that 
# has lots of very small elements moving (like leaves on a tree)
# but you only care about big things (like people or cars) 
# moving.
#
# This is also useful where you have a "noisy" low end camera 
# where the image is "crackling" a lot.
#
# This feature does tend to consume a little bit of extra
# CPU resources.
#
despeckle_filter EedD

# Number of images that must contain motion to trigger an event.
minimum_motion_frames 2

# Gap in seconds of no motion detected that triggers the end of an event.
event_gap 3

# The number of pre-captured (buffered) pictures from before motion.
pre_capture 4

# Number of frames to capture after motion is no longer detected.
#
post_capture 1

# Percentage of picture area changing that indicates a
# light turning on or off. Above this then no event will
# be logged
lightswitch_percent 50

# Number of frames to ignore when lightswitch (above)
# detected.
lightswitch_frames 1

# Pixel noise threshold for motion detection.
#
# This setting helps to eliminate false positives where
# even though nothing is moving, individual pixels are
# undergoing brightness changes that trigger events.
#
# An example is "noisy" or "crackly" old cameras.
# I personally found that this setting will help stop 
# false positives from white surfaces which are subject 
# to "flaring", especially under some kinds of artifical 
# light. 
#
# I suggest setting "noise_tune off" and manually setting
# the noise threshold to suit your environment.
noise_tune off
noise_level 20	

# When set to on, draw a square around detected motion
locate_motion_mode off

# Make the displayed square red
locate_motion_style redbox
